#
# Copyright (C) Telecom ParisTech
#
# This file must be used under the terms of the CeCILL.
# This source file is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at
# http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
#

#############
# Variables #
#############

# General purpose
SHELL	:= /bin/bash
DEBUG	:= 0

ifeq ($(DEBUG),0)
OUTPUT	:= &> /dev/null
else ifeq ($(DEBUG),1)
OUTPUT	:= > /dev/null
else
OUTPUT	:=
endif

BUILD		:= build
HDLDIR		:= hdl
HDLSRCS		:= $(wildcard $(HDLDIR)/*.vhd)
SCRIPTS		:= scripts

# Mentor Graphics Modelsim
MSBUILD		:= $(BUILD)/ms
MSRELPATH	:= ../..
MSLIB		:= vlib
MSMAP		:= vmap
MSCOM		:= vcom
MSCOMFLAGS	:= -ignoredefaultbinding -nologo -quiet -2008
MSLOG    	:= vlog
MSLOGFLAGS	:= -nologo -quiet
MSSIM		:= vsim
MSSIMFLAGS	:= -voptargs="+acc"
MSCONFIG	:= $(MSBUILD)/modelsim.ini
MSTAGS		:= $(patsubst $(HDLDIR)/%.vhd,$(MSBUILD)/%.tag,$(HDLSRCS))

# Xilinx Vivado
VIVADO		:= vivado
VIVADOFLAGS	:= -mode batch
VVBUILD		:= $(BUILD)/vv
VVRELPATH	:= ../..
VVIMPL		:= $(VVBUILD)/top.runs/impl_1
VVBIT		:= $(VVIMPL)/top_wrapper.bit
VVSCRIPT	:= $(SCRIPTS)/vvsyn.tcl

# Software Design Kits
XLNXDIR			?= /opt/xlnx
XLNXDEVICETREEDIR	?= $(XLNXDIR)/device-tree-xlnx
HSI			:= hsi
DTSSCRIPT		:= $(SCRIPTS)/dts.tcl
DTSFLAGS		:= -mode batch -quiet -notrace -nojournal -nolog -tempDir /tmp
DTC			?= $(XLNXDIR)/linux-xlnx/scripts/dtc/dtc
DTCFLAGS		:= -I dts -O dtb
SDKBUILD		:= $(BUILD)/sdk
SDKRELPATH		:= ../..
SYSDEF			:= $(VVIMPL)/top_wrapper.sysdef
DTSBUILD		:= $(SDKBUILD)/dts
DTSRELPATH		:= ../../..
DTSTOP			:= $(DTSBUILD)/system.dts
DTSPATCH		:=
DTBTOP			:= $(SDKBUILD)/devicetree.dtb
FSBLSCRIPT		:= $(SCRIPTS)/fsbl.tcl
FSBLFLAGS		:= -mode batch -quiet -notrace -nojournal -nolog -tempDir /tmp
FSBLBUILD		:= $(SDKBUILD)/fsbl
FSBLRELPATH		:= ../../..
FSBLTOP			:= $(FSBLBUILD)/main.c
FSBLPATCH		:=
FSBLELF			:= $(SDKBUILD)/fsbl.elf

BOOTGEN			:= bootgen
BOOTGENFLAGS		:= -w -image $(BOOTBIF)
BOOTBIF			:= $(SCRIPTS)/boot.bif
BOOTBIN			:= $(SDKBUILD)/boot.bin
BITSTREAM		:= $(VVBIT)

MKIMAGE			:= $(XLNDIR)/u-boot-xlnx/tools/mkimage
MKIMAGELINUXFLAGS	:= -A arm -O linux -C none -T kernel
ZIMAGE			:= $(XLNDIR)/linux-xlnx/arch/arm/boot/zImage
UIMAGELOADADDRESS	:= 0x8000
UIMAGE			:= $(SDKBUILD)/uImage

MKIMAGEROOTFSFLAGS	:= -A arm -T ramdisk -C gzip
ROOTFS			:= /opt/buildroot/ar/images/rootfs.cpio.gz

UBOOT			:= $(XLNDIR)/u-boot-xlnx/u-boot
UBOOTELF		:= $(SDKBUILD)/u-boot.elf
UROOTFS			:= $(SDKBUILD)/ramdisk.rootfs
UENV			:= uEnv.txt
UENVTXT			:= $(SDKBUILD)/uEnv.txt

# Messages
define HELP_message
make targets:
  make help       print this message (default goal)
  make ms-all     compile all VHDL source files with Modelsim
  make ms-clean   delete all files and directories automatically created by Modelsim
  make vv-all     synthesize design with Vivado
  make vv-clean   delete all files and directories automatically created by Vivado
  make clean      delete all automatically created files and directories
  make dtb        compile device tree blob
  make fsbl       compile First Stage Boot Loader (FSBL)
  make sdk        run all Software Design Kits to generate all software components
  make sdk-clean  delete all files and directories automatically created by SDKs

directories:
  hdl sources      ./$(HDLDIR)
  build            ./$(BUILD)
  Modelsim build   ./$(MSBUILD)
  Vivado build     ./$(VVBUILD)
  SDK build        ./$(SDKBUILD)

customizable make variables:
	DEBUG			debug level: 0=none, 1: some, 2: verbose ($(DEBUG_def))
	XLNDIR		parent directory of Xilinx git clones ($(XLNDIR))
	XLNXDEVICETREEDIR	clone of Xilinx device trees git repository ($(XLNXDEVICETREEDIR_def))
	HSI			Xilinx hsi utility ($(HSI_def))
	DTSHSISCRIPT		hsi tcl script ($(DTSHSISCRIPT_def))
	DTSHSIFLAGS		hsi tcl flags ($(DTSHSIFLAGS_def))
	DTC			device tree compiler ($(DTC_def))
	DTCFLAGS		device tree compiler flags ($(DTCFLAGS_def))
	SDKBUILD			directory in which to store generated software components ($(SDKDIR_def))
	SYSDEF			system definition file generated by Vivado ($(SYSDEF_def))
	DTSBUILD			directory of device tree sources to create ($(DTSBUILD_def))
	DTS			top level device tree source file to create ($(DTS_def))
	DTSPATCH		patch to apply to device tree sources ($(DTSPATCH_def))
	DTB			device tree blob to create ($(DTB_def))
	FSBLHSISCRIPT		hsi tcl script ($(FSBLHSISCRIPT_def))
	FSBLHSIFLAGS		hsi tcl flags ($(FSBLHSIFLAGS_def))
	FSBLBUILD			directory of FSBL sources to create ($(FSBLBUILD_def))
	FSBLS			top level FSBL source file to create ($(FSBLS_def))
	FSBLPATCH		patch to apply to FSBL sources ($(FSBLPATCH_def))
	FSBLE			ELF FSBL to create ($(FSBLE_def))

	BOOTGEN			Xilinx bootgen utility  ($(BOOTGEN_def))
	BOOTGENFLAGS		Xilinx bootgen flags ($(BOOTGENFLAGS_def))
	BOOTBIF			boot image format definition file ($(BOOTBIF_def))
	BOOTBIN			boot image ($(BOOTBIN_def))
	BITSTREAM		bitstream ($(BITSTREAM_def))

	MKIMAGE			U-Boot mkimage utility ($(MKIMAGE_def))
	MKIMAGELINUXFLAGS	mkimage flags for Linux kernel packaging ($(MKIMAGELINUXFLAGS_def))
	ZIMAGE			compressed Linux kernel ($(ZIMAGE_def))
	UIMAGELOADADDRESS	Linux kernel load address passed to mkimage ($(UIMAGELOADADDRESS_def))
	UIMAGE			Linux kernel packaged for U-Boot ($(UIMAGE_def))

	MKIMAGEROOTFSFLAGS	mkimage flags for root file system packaging ($(MKIMAGEROOTFSFLAGS_def))
	ROOTFS			root file system ($(ROOTFS_def))

	UBOOT			U-Boot ELF ($(UBOOT_def))
	UBOOTELF		U-Boot ELF ($(UBOOTELF_def))
	UROOTFS			root file system packaged for U-Boot ($(UROOTFS_def))
	UENV			U-Boot environment variables definition file ($(UENV_def))
	UENVTXT			U-Boot environment variables definition file ($(UENVTXT_def))
endef
export HELP_message

define VVBUILDEXISTS_message
--------------------------------------------------------------------------------
Vivado build directory $(VVBUILD) already exists. Cowardly refusing to modify it.
--------------------------------------------------------------------------------

endef
export VVBUILDEXISTS_message

define DTCMISSING_message
--------------------------------------------------------------------------------
Device tree compiler $(DTC) not found.
--------------------------------------------------------------------------------

endef
export DTCMISSING_message

define DTSBUILDEXISTS_message
--------------------------------------------------------------------------------
Device tree source directory $(DTSBUILD) already exists. Cowardly refusing to modify it.
--------------------------------------------------------------------------------

endef
export DTSBUILDEXISTS_message

define XLNXDTSMISSING_message
--------------------------------------------------------------------------------
Xilinx device tree source directory $(XLNXDEVICETREEDIR) not found.
--------------------------------------------------------------------------------

endef
export XLNXDTSMISSING_message

define FSBLBUILDEXISTS_message
--------------------------------------------------------------------------------
Device tree source directory $(FSBLBUILD) already exists. Cowardly refusing to modify it.
--------------------------------------------------------------------------------

endef
export FSBLBUILDEXISTS_message

################
# Make targets #
################

# Help
help:
	@echo "$$HELP_message"

# Mentor Graphics Modelsim
ms-all: $(MSTAGS)

$(MSTAGS): $(MSBUILD)/%.tag: $(HDLDIR)/%.vhd
	@echo '[MSCOM] $<'; \
	cd $(MSBUILD); \
	$(MSCOM) $(MSCOMFLAGS) $(MSRELPATH)/$<; \
	touch $(notdir $@)

$(MSTAGS): $(MSCONFIG)

$(MSCONFIG):
	@echo '[MKDIR] $(MSBUILD)'; \
	mkdir -p $(MSBUILD); \
	cd $(MSBUILD); \
	$(MSLIB) .work $(OUTPUT); \
	$(MSMAP) work .work $(OUTPUT)

$(MSBUILD)/axi_register.tag: $(MSBUILD)/axi_pkg.tag $(MSBUILD)/debouncer.tag $(MSBUILD)/utils.tag

ms-clean:
	@echo '[RM] $(MSBUILD)'; \
	rm -rf $(MSBUILD)

# Xilinx Vivado
vv-all: $(VVBIT)

$(VVBIT): $(HDLSRCS) $(VVSCRIPT)
	@if [ -d $(VVBUILD) ]; then \
		echo "$$VVBUILDEXISTS_message"; \
		exit -1; \
	fi; \
	echo '[VIVADO] $(VVSCRIPT)'; \
	mkdir -p $(VVBUILD); \
	cd $(VVBUILD); \
	VVRELPATH=$(VVRELPATH) HDLDIR=$(HDLDIR) $(VIVADO) $(VIVADOFLAGS) -source $(VVRELPATH)/$(VVSCRIPT); \
	echo ''; \
	echo '[VIVADO] $(VVSCRIPT): done'; \
	echo '  bitstream in $(VVBIT)'; \
	echo '  resource utilization report in $(VVIMPL)/top_wrapper_utilization_placed.rpt'; \
	echo '  timing report in $(VVIMPL)/top_wrapper_timing_summary_routed.rpt'

vv-clean:
	@echo '[RM] $(VVBUILD)'; \
	rm -rf $(VVBUILD)

# Software Design Kits
$(VVIMPL)/$(SYSDEF): $(VVBIT)

$(SDKBUILD)/$(SYSDEF): $(VVIMPL)/$(SYSDEF)
	@mkdir -p $(SDKBUILD); \
	cp $< $@

dtb: $(DTBTOP)

$(DTSTOP): $(SYSDEF) $(DTSSCRIPT)
	@if [ -d $(DTSBUILD) ]; then \
		echo "$$DTSBUILDEXISTS_message"; \
		exit -1; \
	fi; \
	if [ ! -d $(XLNXDEVICETREEDIR) ]; then \
		echo "$$XLNXDTSMISSING_message"; \
		exit -1; \
	fi; \
	mkdir -p $(DTSBUILD); \
	echo '[HSI] $< --> $(DTSBUILD)'; \
	$(HSI) $(DTSFLAGS) -source $(DTSSCRIPT) -tclargs $(SYSDEF) $(XLNXDEVICETREEDIR) $(DTSBUILD) $(OUTPUT); \
	if [ "X$(DTSPATCH)" != "X" ]; then \
		dtspatch=$(DTSPATCH); \
		if [ -f $$dtspatch ]; then \
			echo '[PATCH] $(DTSPATCH) --> $(DTSBUILD)'; \
			patch -p1 -d $(DTSBUILD) < $$dtspatch; \
		else \
			echo '$(DTSPATCH) not found'; \
			exit -1; \
		fi; \
	fi

$(DTBTOP): $(DTSTOP)
	@if [ ! -x $(DTC) ]; then \
		echo "$$DTCMISSING_message"; \
		exit -1; \
	fi; \
	echo '[DTC] $< --> $@'; \
	$(DTC) $(DTCFLAGS) -o $@ $(DTSTOP) $(OUTPUT)

fsbl: $(FSBLELF)

$(FSBLTOP): $(SYSDEF) $(FSBLSCRIPT)
	@if [ -d $(FSBLBUILD) ]; then \
		echo "$$FSBLBUILDEXISTS_message"; \
		exit -1; \
	fi; \
	mkdir -p $(FSBLBUILD); \
	echo '[HSI] $< --> $(FSBLBUILD)'; \
	$(HSI) $(FSBLFLAGS) -source $(FSBLSCRIPT) -tclargs $(SYSDEF) $(FSBLBUILD) $(OUTPUT); \
	if [ "X$(FSBLPATCH)" != "X" ]; then \
		fsblpatch=$(FSBLPATCH); \
		if [ -f $$fsblpatch ]; then \
			echo '[PATCH] $(FSBLPATCH) --> $(FSBLBUILD)'; \
			patch -p1 -d $(FSBLBUILD) < $$fsblpatch; \
		else \
			echo '$(FSBLPATCH) not found'; \
			exit -1; \
		fi; \
	fi

$(FSBLELF): $(FSBLBUILD)/executable.elf
	@echo '[CP] $< --> $@'; \
	cp $< $@
	
$(FSBLBUILD)/executable.elf: $(FSBLTOP)
	@echo '[MAKE] $(FSBLBUILD)'; \
	$(MAKE) -C $(FSBLBUILD)

sdk: $(DTBTOP) $(FSBLELF)

sdk-clean:
	@echo '[RM] $(SDKBUILD)'; \
	rm -rf $(SDKBUILD)


# $(BOOTBIN): $(BOOTBIF) $(FSBLE) $(BITSTREAM) $(UBOOTELF)
# 	$(BOOTGEN) $(BOOTGENFLAGS) -o $(BOOTBIN)
# 
# $(UBOOTELF): $(UBOOT)
# 	cp $< $@
# 
# $(UIMAGE): $(ZIMAGE) $(MKIMAGE)
# 	$(MKIMAGE) $(MKIMAGELINUXFLAGS) -a $(UIMAGELOADADDRESS) -e $(UIMAGELOADADDRESS) -d $(ZIMAGE) $@
# 
# $(UROOTFS): $(ROOTFS) $(MKIMAGE)
# 	$(MKIMAGE) $(MKIMAGEROOTFSFLAGS) -d $(ROOTFS) $@
# 
# $(UENVTXT): $(UENV)
# 	cp $< $@

clean:
	@echo '[RM] $(BUILD)'; \
	rm -rf $(BUILD)
